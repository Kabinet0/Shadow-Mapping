// Thanks: https://www.reddit.com/r/vulkan/comments/y6sz28/point_light_shadow_mapping_using_cube_maps/

// Suppress annoying warning
#pragma warning (disable : 3078)

// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CubemapBlurY

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
Texture2D<float2> _InputBuffer;
RWTexture2D<float2> _OutputBuffer;

StructuredBuffer<float2> _CubeSliceOffsets;
StructuredBuffer<int2> _CubemapData; // X is resolution, Y is _FovPaddingPx

int _Radius;

#define POS_X 0
#define NEG_X 1
#define POS_Y 2
#define NEG_Y 3
#define POS_Z 4
#define NEG_Z 5

uint2 TrailingFace(uint y, uint x, uint face, uint faceIndex, uint _Resolution) 
{
    switch (face) {
    case POS_X:
        return uint2(y, _Resolution - (x + 1)) + _CubeSliceOffsets[NEG_Y + faceIndex]; // Right for trailing PERHAPS
    case NEG_X:
        // Negative X
        return uint2(_Resolution - (y + 1), x) + _CubeSliceOffsets[NEG_Y + faceIndex]; // Right for trailing PERHAPS
    case POS_Y:
        // Positive Y
        return uint2(x, y) + _CubeSliceOffsets[POS_Z + faceIndex]; // Right? but for trailing
    case NEG_Y:
        // Negative Y
        return uint2(_Resolution - (x + 1), _Resolution - (y + 1)) + _CubeSliceOffsets[NEG_Z + faceIndex];// Right? but for trailing
    case POS_Z:
        // Positive Z
        return uint2(x, y) + _CubeSliceOffsets[NEG_Y + faceIndex]; // Right for trailing
    case NEG_Z:
        // Negative Z
        return uint2(_Resolution - (x + 1), _Resolution - (y + 1)) + _CubeSliceOffsets[NEG_Y + faceIndex];  // Right for trailing


    default:
        // Negative Z
        return uint2(_Resolution - (x + 1), _Resolution - (y + 1)) + _CubeSliceOffsets[NEG_Y + faceIndex];  // Right for trailing
    }
}

int2 LeadingFace(uint y, uint x, uint face, uint faceIndex, uint _Resolution) // idk // Used to be TrailingFace
{
    switch (face) {
    case POS_X:
        return uint2(_Resolution - (y + 1), x) + _CubeSliceOffsets[POS_Y + faceIndex]; // Right for leading PERHAPS
    case NEG_X:
        // Negative X
        return uint2(y, _Resolution - (x + 1)) + _CubeSliceOffsets[POS_Y + faceIndex]; // Right for leading PERHAPS
    case POS_Y:
        // Positive Y
        return uint2(_Resolution - (x + 1), _Resolution - (y + 1)) + _CubeSliceOffsets[NEG_Z + faceIndex]; // Right for leading
    case NEG_Y:
        // Negative Y
        return uint2(x, y) + _CubeSliceOffsets[POS_Z + faceIndex]; // Right for leading
    case POS_Z:
        // Positive Z
        return uint2(x, y) + _CubeSliceOffsets[POS_Y + faceIndex]; // Right for leading
    case NEG_Z:
        // Negative Z
        return uint2(_Resolution - (x + 1), _Resolution - (y + 1)) + _CubeSliceOffsets[POS_Y + faceIndex]; // Right for leading



    default:
        // Negative Z
        return uint2(_Resolution - (x + 1), _Resolution - (y + 1)) + _CubeSliceOffsets[POS_Y + faceIndex];
    }
}


[numthreads(64,1,1)]
void CubemapBlurY (uint3 id : SV_DispatchThreadID)
{
    int _Resolution;
    int _FovPaddingPx;
    uint _CubeIndex;

    // Structured Buffer data
    uint cubeCount, stride;
    _CubemapData.GetDimensions(cubeCount, stride);

    // Determine data for this rowID
    uint RowIDSum = 0;
    for (uint cubeID = 0; cubeID < cubeCount; cubeID++) {
        RowIDSum += _CubemapData[cubeID].x;
        if (id.x < RowIDSum) {
            // Do stuff
            _Resolution = _CubemapData[cubeID].x;
            _FovPaddingPx = _CubemapData[cubeID].y;
            _CubeIndex = cubeID;

            break;
        }
    }

    uint face = id.z;
    uint faceIndex = 6 * _CubeIndex;
    uint x = id.x - (RowIDSum - _Resolution);

    float2 FaceOffset = _CubeSliceOffsets[face + faceIndex];
    float2 Accumulator = float2(0, 0);

    float per_Texel = 1 / float(2 * _Radius + 1);

    
    // Accumulate last part of trailing face
    for (int y = _Resolution - _Radius; y < _Resolution; y++) {
        Accumulator += _InputBuffer[TrailingFace(y - (_FovPaddingPx * 2), x, face, faceIndex, _Resolution)];
    }

    // Accumulate first part of current face
    for (int y = 0; y < _Radius; y++) {
        Accumulator += _InputBuffer[uint2(x, y) + FaceOffset];
    }

    // Blur first part of face, accounting for trailing face
    for (int y = 0; y < _Radius; y++) {
        Accumulator += _InputBuffer[uint2(x, y + _Radius) + FaceOffset];
        _OutputBuffer[uint2(x, y) + FaceOffset] = Accumulator * per_Texel;
        Accumulator -= _InputBuffer[TrailingFace((_Resolution - _Radius - (_FovPaddingPx * 2)) + y, x, face, faceIndex, _Resolution)];
    }

    // Blur main part of face
    for (int y = _Radius; y < _Resolution - _Radius; y++) {
        Accumulator += _InputBuffer[uint2(x, y + _Radius) + FaceOffset];
        _OutputBuffer[uint2(x, y) + FaceOffset] = Accumulator * per_Texel;
        //_OutputBuffer[uint2(x, y) + FaceOffset] = float2(0,0);
        Accumulator -= _InputBuffer[uint2(x, y - _Radius) + FaceOffset];
    }

    // Blur over into leading face
    for (int y = _Resolution - _Radius; y < _Resolution; y++) {
        Accumulator += _InputBuffer[LeadingFace((y + _Radius) - _Resolution + (_FovPaddingPx * 2), x, face, faceIndex, _Resolution)];
        _OutputBuffer[uint2(x, y) + FaceOffset] = Accumulator * per_Texel;
        Accumulator -= _InputBuffer[uint2(x, y - _Radius) + FaceOffset];
    }
}
